name: Release Build

on:
  push:
    tags:
      - "v*" # 当推送以v开头的tag时触发
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: mihomo-connections-tracker-linux-x86_64
          # Arm64: 由于github actions构建采用cross，导致 openssl 依赖找不到的问题
          # 暂时禁用
          # # Linux ARM64
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   artifact_name: mihomo-connections-tracker-linux-aarch64
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: mihomo-connections-tracker-macos-x86_64
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: mihomo-connections-tracker-macos-aarch64
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: mihomo-connections-tracker-windows-x86_64.exe
          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: mihomo-connections-tracker-windows-aarch64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: |
          cd backend
          cargo build --release --target ${{ matrix.target }}
        shell: bash

      - name: Create release directory
        run: |
          mkdir -p release
        shell: bash

      - name: Copy binary to release directory
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp backend/target/${{ matrix.target }}/release/mihomo-connections-tracker.exe release/${{ matrix.artifact_name }}
          else
            cp backend/target/${{ matrix.target }}/release/mihomo-connections-tracker release/${{ matrix.artifact_name }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.artifact_name }}

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          generate_release_notes: true
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
